Desenvolva um programa em C++ que permita a leitura de um vetor de 30
números inteiros, e gere um segundo vetor com os mesmos dados, só que de
maneira invertida, ou seja, o primeiro elemento ficará na última posição, o
segundo na penúltima posição, e assim por diante.

ChatGPT
Aqui está um exemplo de programa em C++ que lê um vetor de 30 números inteiros e gera um segundo vetor com os mesmos dados, mas em ordem invertida:

cpp
Copy code
#include <iostream>

int main() {
    const int tamanho = 30;
    int vetorOriginal[tamanho];
    int vetorInvertido[tamanho];

    // Leitura dos números
    std::cout << "Digite os " << tamanho << " números inteiros:" << std::endl;
    for (int i = 0; i < tamanho; i++) {
        std::cin >> vetorOriginal[i];
    }

    // Geração do vetor invertido
    for (int i = 0; i < tamanho; i++) {
        vetorInvertido[i] = vetorOriginal[tamanho - 1 - i];
    }

    // Exibição do vetor invertido
    std::cout << "Vetor invertido:" << std::endl;
    for (int i = 0; i < tamanho; i++) {
        std::cout << vetorInvertido[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}
Neste programa, definimos uma constante tamanho com valor 30 para representar o tamanho do vetor. Em seguida, declaramos dois vetores: vetorOriginal e vetorInvertido, ambos com tamanho igual a tamanho.

Em seguida, o programa solicita ao usuário que digite os 30 números inteiros, armazenando-os no vetor vetorOriginal.

Depois disso, o programa percorre o vetor vetorOriginal e atribui seus elementos ao vetor vetorInvertido de forma invertida. O primeiro elemento do vetor vetorOriginal será o último elemento do vetor vetorInvertido, o segundo elemento será o penúltimo, e assim por diante.

Por fim, o programa exibe o vetor vetorInvertido, apresentando os números na ordem inversa à do vetor vetorOriginal.





User
Construa um programa em C++ que leia uma série de 50 notas de uma turma
de alunos e calcule quantas são acima, abaixo e iguais à média dessas notas
ChatGPT
Aqui está um exemplo de programa em C++ que lê uma série de 50 notas de uma turma de alunos e calcula quantas são acima, abaixo e iguais à média dessas notas:

cpp
Copy code
#include <iostream>

int main() {
    const int tamanho = 50;
    float notas[tamanho];
    float soma = 0;
    float media;
    int acima = 0, abaixo = 0, igual = 0;

    // Leitura das notas
    std::cout << "Digite as " << tamanho << " notas:" << std::endl;
    for (int i = 0; i < tamanho; i++) {
        std::cin >> notas[i];
        soma += notas[i];
    }

    // Cálculo da média
    media = soma / tamanho;

    // Contagem das notas acima, abaixo e iguais à média
    for (int i = 0; i < tamanho; i++) {
        if (notas[i] > media) {
            acima++;
        } else if (notas[i] < media) {
            abaixo++;
        } else {
            igual++;
        }
    }

    // Exibição dos resultados
    std::cout << "Notas acima da média: " << acima << std::endl;
    std::cout << "Notas abaixo da média: " << abaixo << std::endl;
    std::cout << "Notas iguais à média: " << igual << std::endl;

    return 0;
}
Neste programa, definimos uma constante tamanho com valor 50 para representar o número de notas da turma. Em seguida, declaramos um vetor notas com tamanho igual a tamanho para armazenar as notas digitadas pelo usuário.

O programa solicita ao usuário que digite as 50 notas, armazenando-as no vetor notas. Ao mesmo tempo, vamos somando as notas para calcular a média posteriormente.

Após a leitura das notas, calculamos a média dividindo a soma das notas pela quantidade de notas.

Em seguida, percorremos o vetor notas novamente e verificamos cada nota em relação à média. Se a nota for maior que a média, incrementamos o contador acima. Se for menor, incrementamos o contador abaixo. Se for igual, incrementamos o contador igual.

Por fim, exibimos os resultados: o número de notas acima da média, o número de notas abaixo da média e o número de notas iguais à média.





User
4. Crie um programa em C++ que leia um vetor de 10 elementos. A seguir,
troque o 1º elemento do vetor com o último, o 2º com o penúltimo, e assim por
diante, até a troca do 5º com o 6º elemento do vetor. Ao final, escreva os
valores do vetor modificado.
ChatGPT
Aqui está um exemplo de programa em C++ que lê um vetor de 10 elementos e realiza as trocas mencionadas:

cpp
Copy code
#include <iostream>

int main() {
    const int tamanho = 10;
    int vetor[tamanho];

    // Leitura dos elementos do vetor
    std::cout << "Digite os " << tamanho << " elementos do vetor:" << std::endl;
    for (int i = 0; i < tamanho; i++) {
        std::cin >> vetor[i];
    }

    // Troca dos elementos do vetor
    for (int i = 0; i < tamanho / 2; i++) {
        if (i < 5) {
            int temp = vetor[i];
            vetor[i] = vetor[tamanho - 1 - i];
            vetor[tamanho - 1 - i] = temp;
        }
    }

    // Exibição do vetor modificado
    std::cout << "Vetor modificado:" << std::endl;
    for (int i = 0; i < tamanho; i++) {
        std::cout << vetor[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}
Neste programa, definimos uma constante tamanho com valor 10 para representar o tamanho do vetor. Em seguida, declaramos um vetor vetor com tamanho igual a tamanho para armazenar os elementos digitados pelo usuário.

O programa solicita ao usuário que digite os 10 elementos do vetor, armazenando-os no vetor vetor.

Após a leitura dos elementos, percorremos metade do vetor utilizando o loop for, até o índice tamanho / 2. Dentro desse loop, realizamos as trocas dos elementos do vetor da seguinte maneira: o elemento na posição i é trocado com o elemento na posição tamanho - 1 - i. No entanto, essa troca é realizada somente para os primeiros 5 elementos do vetor, conforme a condição if (i < 5).

Por fim, exibimos os elementos do vetor modificado, apresentando os valores após as trocas.





User
Elabore um programa em C++ que receba do usuário 10 letras
diferentes do alfabeto e as armazene em um vetor. Em seguida,
receba uma letra qualquer, também informada pelo usuário, e
realize uma busca no vetor: caso a encontre, mostre em que
posição ela está; caso não a encontre mostre uma mensagem.
ChatGPT
Aqui está um exemplo de programa em C++ que recebe do usuário 10 letras diferentes do alfabeto, as armazena em um vetor e realiza a busca por uma letra informada pelo usuário:

cpp
Copy code
#include <iostream>

int main() {
    const int tamanho = 10;
    char letras[tamanho];
    char letraBusca;
    bool encontrada = false;
    int posicao = -1;

    // Leitura das letras
    std::cout << "Digite as " << tamanho << " letras diferentes do alfabeto:" << std::endl;
    for (int i = 0; i < tamanho; i++) {
        std::cin >> letras[i];
    }

    // Leitura da letra para busca
    std::cout << "Digite uma letra para busca:" << std::endl;
    std::cin >> letraBusca;

    // Busca da letra no vetor
    for (int i = 0; i < tamanho; i++) {
        if (letras[i] == letraBusca) {
            encontrada = true;
            posicao = i;
            break; // Encerra o loop assim que a letra for encontrada
        }
    }

    // Exibição do resultado da busca
    if (encontrada) {
        std::cout << "A letra " << letraBusca << " foi encontrada na posição " << posicao << " do vetor." << std::endl;
    } else {
        std::cout << "A letra " << letraBusca << " não foi encontrada no vetor." << std::endl;
    }

    return 0;
}
Neste programa, definimos uma constante tamanho com valor 10 para representar o tamanho do vetor. Em seguida, declaramos um vetor letras com tamanho igual a tamanho para armazenar as letras digitadas pelo usuário.

O programa solicita ao usuário que digite as 10 letras diferentes do alfabeto, armazenando-as no vetor letras.

Após a leitura das letras, solicitamos ao usuário que digite uma letra para busca, que será armazenada na variável letraBusca.

Em seguida, percorremos o vetor letras utilizando o loop for, buscando a letra informada pelo usuário. Se a letra for encontrada em alguma posição do vetor, armazenamos a informação em variáveis auxiliares encontrada (indicando se a letra foi encontrada) e posicao (armazenando a posição onde a letra foi encontrada). Caso contrário, as variáveis encontrada e posicao permanecem com os valores iniciais (false e -1, respectivamente).

Por fim, exibimos o resultado da busca. Se a letra for encontrada, mostramos em qual posição do vetor ela está. Caso contrário, exibimos uma mensagem informando que a letra não foi encontrada.





User
 Um apostador da mega-sena realizou uma aposta e deseja
saber quantos números ele acertou. Faça um programa em C++
que receba os números sorteados no concurso da loteria e a
aposta realizada e mostre quantos pontos ele fez.
ChatGPT
Aqui está um exemplo de programa em C++ que recebe os números sorteados no concurso da Mega-Sena e a aposta realizada por um jogador, e mostra quantos números ele acertou:

cpp
Copy code
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    const int tamanhoAposta = 6;

    std::vector<int> numerosSorteados;
    std::vector<int> aposta;
    int numero;

    // Leitura dos números sorteados
    std::cout << "Digite os números sorteados (6 números diferentes):" << std::endl;
    for (int i = 0; i < tamanhoAposta; i++) {
        std::cin >> numero;
        numerosSorteados.push_back(numero);
    }

    // Leitura da aposta
    std::cout << "Digite a sua aposta (6 números diferentes):" << std::endl;
    for (int i = 0; i < tamanhoAposta; i++) {
        std::cin >> numero;
        aposta.push_back(numero);
    }

    // Ordena os números para facilitar a comparação
    std::sort(numerosSorteados.begin(), numerosSorteados.end());
    std::sort(aposta.begin(), aposta.end());

    // Verifica quantos números foram acertados
    int acertos = 0;
    for (int i = 0; i < tamanhoAposta; i++) {
        if (std::binary_search(numerosSorteados.begin(), numerosSorteados.end(), aposta[i])) {
            acertos++;
        }
    }

    // Exibe a quantidade de acertos
    std::cout << "Você acertou " << acertos << " número(s) na sua aposta." << std::endl;

    return 0;
}
Neste programa, utilizamos a biblioteca vector para armazenar os números sorteados e a aposta do jogador.

O programa solicita ao usuário que digite os números sorteados, um por vez, armazenando-os no vetor numerosSorteados. Em seguida, solicita a aposta do jogador, também armazenando-a no vetor aposta.

Os números sorteados e a aposta são ordenados utilizando a função std::sort da biblioteca <algorithm>. Isso é feito para facilitar a comparação posteriormente.

Em seguida, percorremos os elementos da aposta e verificamos se cada número está presente nos números sorteados utilizando a função std::binary_search da biblioteca <algorithm>. Se um número da aposta estiver presente nos números sorteados, incrementamos a variável acertos.

Por fim, exibimos a quantidade de acertos na aposta do jogador.

Vale ressaltar que esse programa considera que tanto os números sorteados quanto a aposta do jogador são compostos por 6 números diferentes, uma vez que na Mega-Sena não são permitidos números repetidos.



User
. Crie um programa em C++ que receba os valores de uma matriz D 5x5.
Considere que o usuário não informará valores duplicados. A seguir leia um
número X qualquer e escreva uma mensagem indicando se o valor de X existe ou
não na matriz.
ChatGPT
Aqui está um exemplo de programa em C++ que recebe os valores de uma matriz D 5x5 e verifica se um número X existe na matriz:

cpp
Copy code
#include <iostream>

using namespace std;

int main() {
    const int tamanho = 5;
    int matriz[tamanho][tamanho];

    // Recebendo os valores da matriz
    cout << "Digite os valores da matriz:" << endl;
    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            cin >> matriz[i][j];
        }
    }

    // Lendo o número X
    int x;
    cout << "Digite um número para verificar se existe na matriz: ";
    cin >> x;

    // Verificando se o número X existe na matriz
    bool existe = false;
    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            if (matriz[i][j] == x) {
                existe = true;
                break;
            }
        }
    }

    // Escrevendo a mensagem indicando se o valor de X existe ou não na matriz
    if (existe) {
        cout << "O valor " << x << " existe na matriz." << endl;
    } else {
        cout << "O valor " << x << " não existe na matriz." << endl;
    }

    return 0;
}
Neste programa, uma matriz de tamanho 5x5 é criada e o usuário é solicitado a inserir os valores para preenchê-la. Em seguida, o programa lê um número X e verifica se ele existe na matriz. A mensagem indicando se o valor existe ou não na matriz é exibida no final.





User
 Escreva um programa em C++ que leia uma matriz G 5x5 e preencha
automaticamente 2 vetores, de 5 elementos, SL e SC que contenham,
respectivamente, as somas das linhas e das colunas da matriz G. Ao final, escreva
os valores dos vetores SL e SC.
ChatGPT
Aqui está um exemplo de programa em C++ que lê uma matriz G 5x5 e preenche automaticamente dois vetores, SL e SC, com as somas das linhas e colunas da matriz G, respectivamente. Em seguida, imprime os valores dos vetores SL e SC:

cpp
Copy code
#include <iostream>

using namespace std;

const int tamanho = 5;

int main() {
    int matriz[tamanho][tamanho];
    int SL[tamanho] = {0}; // Vetor para armazenar as somas das linhas
    int SC[tamanho] = {0}; // Vetor para armazenar as somas das colunas

    // Preenchendo a matriz G
    cout << "Digite os valores da matriz G:" << endl;
    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            cin >> matriz[i][j];
        }
    }

    // Calculando as somas das linhas e colunas
    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            SL[i] += matriz[i][j]; // Soma da linha i
            SC[j] += matriz[i][j]; // Soma da coluna j
        }
    }

    // Imprimindo os valores dos vetores SL e SC
    cout << "Valores do vetor SL (soma das linhas): ";
    for (int i = 0; i < tamanho; i++) {
        cout << SL[i] << " ";
    }
    cout << endl;

    cout << "Valores do vetor SC (soma das colunas): ";
    for (int i = 0; i < tamanho; i++) {
        cout << SC[i] << " ";
    }
    cout << endl;

    return 0;
}
Neste programa, a matriz G 5x5 é lida a partir da entrada do usuário. Em seguida, são calculadas as somas das linhas e colunas da matriz, armazenando-as nos vetores SL e SC, respectivamente. Por fim, os valores dos vetores SL e SC são impressos na tela.





User
Construa um programa em C++ que leia uma matriz M 6x6. Em seguida, copie
para um vetor V de tamanho 6 o menor elemento de cada linha da matriz M, em
suas posições respectivas. Após o término da cópia mostre os valores do vetor V.
ChatGPT

2 / 2

Aqui está um exemplo de programa em C++ que lê uma matriz M 6x6 e copia o menor elemento de cada linha para um vetor V de tamanho 6, em suas posições respectivas. Em seguida, imprime os valores do vetor V:

cpp
Copy code
#include <iostream>

using namespace std;

const int tamanho = 6;

int main() {
    int matriz[tamanho][tamanho];
    int V[tamanho];

    // Preenchendo a matriz M
    cout << "Digite os valores da matriz M:" << endl;
    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            cin >> matriz[i][j];
        }
    }

    // Copiando o menor elemento de cada linha para o vetor V
    for (int i = 0; i < tamanho; i++) {
        int menor = matriz[i][0]; // Considera o primeiro elemento da linha como o menor
        for (int j = 1; j < tamanho; j++) {
            if (matriz[i][j] < menor) {
                menor = matriz[i][j]; // Atualiza o menor elemento
            }
        }
        V[i] = menor; // Copia o menor elemento para o vetor V
    }

    // Imprimindo os valores do vetor V
    cout << "Valores do vetor V:" << endl;
    for (int i = 0; i < tamanho; i++) {
        cout << V[i] << " ";
    }
    cout << endl;

    return 0;
}
Neste programa, a matriz M 6x6 é lida a partir da entrada do usuário. Em seguida, para cada linha da matriz, o menor elemento é identificado e copiado para o vetor V na posição correspondente. Por fim, os valores do vetor V são impressos na tela.





User
Em uma loteria a aposta é realizada em cartelas divididas em 5 linhas e
5 colunas preenchidas com os números de 1 a 25. Em cada concurso é
realizado o sorteio de 5 números dentro do intervalo da cartela (1 a 25).
Faça um programa em C++ que receba uma aposta codificada em uma
matriz APOSTA 5x5 preenchida pelo jogador de forma que onde forem
informados o número 1 identifica os valores apostados e o número 0
identifica os valores que não foram apostados. Em seguida receba os
valores sorteados em um vetor SORTEIO de 5 elementos, conte e mostre
quantos pontos foram obtidos pelo jogador em sua aposta. Implemente o
recurso de não permitir que o jogador aposte em mais de 5 números da
cartela
ChatGPT
Aqui está um exemplo de programa em C++ que realiza a verificação de uma aposta em uma loteria. O programa recebe a aposta codificada em uma matriz APOSTA 5x5 e os valores sorteados em um vetor SORTEIO de 5 elementos, e conta quantos pontos foram obtidos pelo jogador na aposta:

cpp
Copy code
#include <iostream>

using namespace std;

const int tamanho = 5;

int contarPontos(int matriz[tamanho][tamanho], int sorteio[]) {
    int pontos = 0;

    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            if (matriz[i][j] == 1) {
                for (int k = 0; k < 5; k++) {
                    if (sorteio[k] == (i * tamanho + j + 1)) {
                        pontos++;
                        break;
                    }
                }
            }
        }
    }

    return pontos;
}

int main() {
    int APOSTA[tamanho][tamanho];
    int SORTEIO[5];

    // Preenchendo a matriz APOSTA
    cout << "Digite sua aposta (utilize 1 para os números apostados e 0 para os não apostados):" << endl;
    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            cin >> APOSTA[i][j];
        }
    }

    // Recebendo os valores sorteados
    cout << "Digite os valores sorteados (5 números de 1 a 25):" << endl;
    for (int i = 0; i < 5; i++) {
        cin >> SORTEIO[i];
    }

    // Verificando os pontos obtidos na aposta
    int pontos = contarPontos(APOSTA, SORTEIO);

    // Imprimindo a quantidade de pontos obtidos
    cout << "Pontos obtidos: " << pontos << endl;

    return 0;
}
Neste programa, o jogador insere a aposta na matriz APOSTA 5x5, utilizando 1 para os números apostados e 0 para os números não apostados. Em seguida, o jogador digita os valores sorteados no vetor SORTEIO. O programa verifica a aposta e conta a quantidade de pontos obtidos pelo jogador, comparando os valores apostados com os números sorteados. Por fim, a quantidade de pontos é exibida na tela. O programa também inclui a restrição para que o jogador não possa apostar em mais de 5 números da cartela.
